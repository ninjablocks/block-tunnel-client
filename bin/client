#!/usr/bin/env node

var program = require('commander')

program
.version(require('../package.json').version)
.option('-s, --service-definitions [file]', 'file containing service/port mappings', '~/.tunnel-services.json')
.option('-i, --id [id]', 'id to log in to server with', 'admin')
.option('-p, --port [port]', 'port on host server', 8001)
.option('-h, --host [host]', 'address of host server', 'localhost')
.option('-v, --verbose', 'verbose output')
.option('--insecure', 'Do not reject unuthorised server certificates. For debugging.')
.parse(process.argv)

if (program.verbose) process.env.DEBUG = '*'
var log = require('debug')('client')

// Defer loading rest of deps until
// after setting DEBUG env var.
var fs = require('fs')
var path = require('path')
var reconnect = require('reconnect/tls')

var argv = require('ninja-client/app/argv')
var Client = require('mdm-tunnel/client')

log('reading service definitions', resolvePath(program.serviceDefinitions))
program.services = JSON.parse(fs.readFileSync(resolvePath(program.serviceDefinitions), 'utf8'))

if (!program.services) {
  console.error('config file invalid', program.serviceDefinitions)
  process.exit(1)
}

program.id = makeAuthToken()
log('using credentials: %s', program.id)

Object.keys(program.services).forEach(function(service) {
  log('registering service', service + ':' + program.services[service])
})

log('connecting', program.host + ':' + program.port)
var connection = reconnect(function(socket) {
  socket.pipe(Client(program)).pipe(socket)
}).connect({
  port: program.port,
  host: program.host,
  rejectUnauthorized: !program.insecure
}).on('connect', function() {
  log('connected')
}).on('disconnect', function(err) {
  log('disconnected', err.message)
}).on('reconnect', function(attempt, timeout) {
  log('attempting reconnection %d after %dms', attempt, timeout)
})

/**
 * Support ~ in path name.
 */

function resolvePath(string) {
  if (string.substr(0,1) === '~')
    string = process.env.HOME + string.substr(1)
  return path.resolve(string)
}

function getBlockSerial() {
  try {
    return fs.readFileSync(argv.serialFile, 'utf8')
  } catch (e) {
    var Credentials = require('ninja-client/lib/credentials')
    var serial = Credentials.generateSerial()
    fs.writeFileSync(argv.serialFile, serial)
    return serial
  }
}

function getBlockToken() {
  try {
    return fs.readFileSync(argv.tokenFile, 'utf8')
  } catch(e) {
    return ''
  }
}

function makeAuthToken(serial, token) {
  return JSON.stringify({serial: getBlockSerial(), token: getBlockToken()})
}
